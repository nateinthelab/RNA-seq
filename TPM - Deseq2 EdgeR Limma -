#============================================================================ Exploratory Analysis ============================================================================#
#============================================================================ Deseq2, edgeR, limma ============================================================================#

library(renv)
library(dplyr)
library(tidyr)
library(tidyverse)
library(ggplot2)
library(broom)
library(ggpubr)
library(Rmisc)
library(RColorBrewer)
library(viridisLite)
library(viridis)
library(pheatmap)
library(clusterProfiler)
library(TxDb.Mmusculus.UCSC.mm10.knownGene)
library(ReactomePA)
library(clusterProfiler)
library(enrichplot)
library(reshape2)
library(knitr)
library(FactoMineR)
library(factoextra)
library(DESeq2)
library(edgeR)
library(limma)
library(rtracklayer)
library(GenomicFeatures)
library(Trendy)


# ================================= load and visualize library size and raw count distribution ================================= #
## load raw counts from featurecounts and sample plan ##
rawcounts <- read.csv("featurecounts.csv", row.names = 1)
rawcounts <- data.matrix(rawcounts)
splan <- read.csv("sample_legend.csv", row.names = 1, header = TRUE)
splan
                         sname    subtype
      file1_sorted.bam   group1_1  group1
      file2_sorted.bam   group1_2  group1
      file3_sorted.bam   group2_1  group2
      file4_sorted.bam   group2_2  group2

## update colnames of count table to your sample names
colnames(rawcounts) <- as.character(splan[colnames(rawcounts), "sname"])

## How many reads do I have per sample? ##
colSums(rawcounts)

## make bar plot of library sizes ##
libsize <- colSums(rawcounts)
barplot(libsize, las = 2, main = "Barplot of lib size")

## Draw distribution of raw counts (log2)
boxplot(log2(1+rawcounts),
        las=2, ylab="raw counts (log2)",col="gray50", pch=16)


# ================================= calculate RPKM (reads per kilobase per million) and TPM (transcripts per million) ================================= #
gtf_file_path <- "../"
gtf.in <- file.path(gtf_file_path,"mm10.knownGene.gtf.gz")

## getExonicGeneSize ##
getExonicGeneSize <- function(gtf.in, txdb.db=NULL){
  stopifnot(require(GenomicFeatures))
## create new annotation db ##
  if (is.null(txdb.db)){
    txdb <- makeTxDbFromGFF(gtf.in, format="gtf")
  }else{
      txdb <- loadDb(txdb.db)}
## collect the number of exons per geneID ##
  exons.list.per.gene <- exonsBy(txdb, by="gene")
  ## for each gene, reduce all exons to sets of non-overlapping exons and calculate their length
  exonic.gene.sizes <- sum(width(reduce(exons.list.per.gene)))
  return(exonic.gene.sizes)}

## Calculate RPKM values from raw counts table ##
  ## get RPKM
  ## calculate RPKM values from a gene expression matrix and gtf file
  ## x: matrix of counts
  ## exonic.gene.size: vector of exonic sizes per gene, if not provided, gtf.in is used to build it
getRPKM <- function(x, exonic.gene.sizes){
  rpkm <- x * 10^9 / 
    (matrix(colSums(x), nrow = nrow(x), ncol = ncol(x), byrow=TRUE) * 
       matrix(exonic.gene.sizes, nrow = nrow))
              return(rpkm)}

  ### calculate RPKM
L <- getExonicGeneSize(gtf.in, txdb = txdb.db)

### Calculate TPM values from raw count table ###
  ## get TPM
  ## calculate TPM values from a gene expression matrix and gtf file
  ## x: matrix of counts
  ## exonic.gene.size: vector of exonic sizes per gene. If not provided, gtf.in is used to build it
  ##gtf.in path to gtf file
getTPM <- function(x, exonic.gene.sizes){
  ## calculate read per kilobase
  rpk <- x * 10^3  /matrix(exonic.gene.sizes, nrow=nrow(x), ncol=ncol(x), byrow = FALSE)
  ## then normalize by library size
  tpm <- rpk*matrix(10^6 / colSums(rpk), nrow = nrow(rpk), ncol=ncol(rpk), byrow = TRUE)
  return(tpm)
}
  ## calculate TPM
counts.my.tpm <- getTPM(rawcounts, exonic.gene.sizes = L)
colSums(counts.my.tpm)


# ================================= Deseq2 ================================= #
## create dds (Deseq2) object, with raw counts and comparison to make (~condition, treatment)
dds <- DESeqDataSetFromMatrix(rawcounts, DataFrame(condition=splan$subtype),
                              ~condition)

## Estmate size factors ##
dds <- dds[rowSums(counts(dds)) > 0]

## Run vst normalization ##
rld <-vst(dds, blind=TRUE)

