#============================================================================ Exploratory Analysis ============================================================================#
#============================================================================ Deseq2, edgeR, limma ============================================================================#

library(renv)
library(dplyr)
library(tidyr)
library(tidyverse)
library(ggplot2)
library(broom)
library(ggpubr)
library(Rmisc)
library(RColorBrewer)
library(viridisLite)
library(viridis)
library(pheatmap)
library(clusterProfiler)
library(TxDb.Mmusculus.UCSC.mm10.knownGene)
library(ReactomePA)
library(clusterProfiler)
library(enrichplot)
library(reshape2)
library(knitr)
library(FactoMineR)
library(factoextra)
library(DESeq2)
library(edgeR)
library(limma)
library(rtracklayer)
library(GenomicFeatures)
library(FactoMineR) ## for PCA
library(factoextra) ## for visualization functions
library(Trendy)


# ================================= load and visualize library size and raw count distribution ================================= #
## load raw counts from featurecounts and sample plan ##
rawcounts <- read.csv("featurecounts.csv", row.names = 1)
rawcounts <- data.matrix(rawcounts)
splan <- read.csv("sample_legend.csv", row.names = 1, header = TRUE)
splan
                         sname    subtype
      file1_sorted.bam   sample-1_1  group1
      file2_sorted.bam   sample-1_2  group1
      file3_sorted.bam   sample-2_1  group2
      file4_sorted.bam   sample-2_2  group2

## update colnames of count table to your sample names
colnames(rawcounts) <- as.character(splan[colnames(rawcounts), "sname"])

## How many reads do I have per sample? ##
colSums(rawcounts)

## make bar plot of library sizes ##
libsize <- colSums(rawcounts)
barplot(libsize, las = 2, main = "Barplot of lib size")

## Draw distribution of raw counts (log2)
boxplot(log2(1+rawcounts),
        las=2, ylab="raw counts (log2)",col="gray50", pch=16)


# ================================= calculate RPKM (reads per kilobase per million) and TPM (transcripts per million) ================================= #
gtf_file_path <- "../"
gtf.in <- file.path(gtf_file_path,"mm10.knownGene.gtf.gz")

## getExonicGeneSize ##
getExonicGeneSize <- function(gtf.in, txdb.db=NULL){
  stopifnot(require(GenomicFeatures))
## create new annotation db ##
  if (is.null(txdb.db)){
    txdb <- makeTxDbFromGFF(gtf.in, format="gtf")
  }else{
      txdb <- loadDb(txdb.db)}
## collect the number of exons per geneID ##
  exons.list.per.gene <- exonsBy(txdb, by="gene")
  ## for each gene, reduce all exons to sets of non-overlapping exons and calculate their length
  exonic.gene.sizes <- sum(width(reduce(exons.list.per.gene)))
  return(exonic.gene.sizes)}

## Calculate RPKM values from raw counts table ##
  ## get RPKM
  ## calculate RPKM values from a gene expression matrix and gtf file
  ## x: matrix of counts
  ## exonic.gene.size: vector of exonic sizes per gene, if not provided, gtf.in is used to build it
getRPKM <- function(x, exonic.gene.sizes){
  rpkm <- x * 10^9 / 
    (matrix(colSums(x), nrow = nrow(x), ncol = ncol(x), byrow=TRUE) * 
       matrix(exonic.gene.sizes, nrow = nrow))
              return(rpkm)}

  ### calculate RPKM
L <- getExonicGeneSize(gtf.in, txdb = txdb.db)

### Calculate TPM values from raw count table ###
  ## get TPM
  ## calculate TPM values from a gene expression matrix and gtf file
  ## x: matrix of counts
  ## exonic.gene.size: vector of exonic sizes per gene. If not provided, gtf.in is used to build it
  ##gtf.in path to gtf file
getTPM <- function(x, exonic.gene.sizes){
  ## calculate read per kilobase
  rpk <- x * 10^3  /matrix(exonic.gene.sizes, nrow=nrow(x), ncol=ncol(x), byrow = FALSE)
  ## then normalize by library size
  tpm <- rpk*matrix(10^6 / colSums(rpk), nrow = nrow(rpk), ncol=ncol(rpk), byrow = TRUE)
  return(tpm)
}
  ## calculate TPM
counts.my.tpm <- getTPM(rawcounts, exonic.gene.sizes = L)
colSums(counts.my.tpm)



# ================================= Differential analysis with Deseq2 ================================= #
## create dds (Deseq2) object, with raw counts and comparison to make (~condition, treatment)
dds <- DESeqDataSetFromMatrix(rawcounts, DataFrame(condition=splan$subtype),
                              ~condition)
## Estimate size factors ##
dds <- dds[rowSums(counts(dds)) > 0]

## Run variance stabilizing (Vst) normalization, by  fitting dispersion-mean relations by the size factors generated above##
rld <-vst(dds, blind=TRUE)

## plot raw counts, log2counts, and vst normalized data to see effect
par(mfrow=c(1,3))
plot(counts(dds, normalized=FALSE)[,3:4],
     pch=16, cex=0.3, xlim=c(0,20e3), ylim=c(0,20e3), main = "raw counts")
plot(log2(counts(dds, normalized=FALSE)[,3:4]+1),
     pch=16, cex=0.3, main = "log2 counts")
plot(assay(rld)[,3:4], 
     pch=16, cex=0.3, main="vst normalized counts")



# ================================= PCA plots================================= #
### PCA plot with generic plot###
DESeq2::plotPCA(rld, intgroup = c("condition"), ntop=1000)

### PCA plots with "FactoMineR" and "factoextra" ###
## extract vst matrix ##
counts.vst <- assay(rld)

## select most variable genes ##
gvar <- apply(counts.vst, 1, var)
mostvargenes <- order(gvar, decreasing=TRUE[1:000])

## Run PCA ##
res_pca <- PCA(t(counts.vst[mostvargenes,]), ncp=3, graph = FALSE)

## Make beautiful plots ## 
fviz_eig(res_pca, addlabels = TRUE, ylim = c(0,50))
fviz_eig(res_pca, label="none", habillage=as.factor(splan$subtype))
fviz_pca_ind(res_pca, axes=c(2,3), label="group", habillage=as.factor(splan$subtype), repel = TRUE)



# ================================= Identify genes that contribute most to variance ================================= #
## Look at the variable that contribute the most to the PC1 (Dim.1), or PC2 (Dim.2) ## 
best.contrib <- names(sort(res_pca$var$contrib[,"Dim.1"], decreasing=TRUE))

## Let's check the best gene contributors to variation (you should use tpm counts here, or vst normalized counts). Change main=best.contrib[] value to any integer, representing the rank of contribution to variance. 
  # 1 being top contributor to variance ##
barplot(rawcounts[best.contrib[5],], col="gray50",
        border="white", las=2, main=best.contrib[1])




# ================================= Hierachical Clustering ================================= #
## Clustering of sampless on all genes ## 
## Euclidian sample distance ##
sampleDist <- dist(t(counts.vst))

## Distance correlation with Ward method ##
corDist <- cor(counts.vst, use = "pairwise.complete.obs", method = "pearson") 
sampleDist <- as.dist(1-corDist)
hc <- hclust(sampleDist, method="ward.D2")
plot(hc)

## separate out clusters for exporting ## (check package, you can cluster by row for genes) ##
cutree(hc, k = number_of_clusters_you_wish_to_export)




#================================= Heatmap of top variable genes ================================= #
## reorder samples in order you wish them to be displayed on heatmap ## 
level_order_subtype <- factor(splan$subtype, level = c('group1','group2'))
level_order_sname <- factor(splan$sname, level = c("sample-1_1","sample-1_2","sample-2_1","sample-2_2"))

## set number of top variable genes you wish to display on heatmap, in this case, it will show the 5000 most variable genes ##
mostvargenes <- order(gvar, decreasing=TRUE)[1:5000]
annot <- data.frame(level_order_subtype, row.names = level_order_sname)
pheatmap(counts.vst[mostvargenes,],
         cluster_cols = FALSE,
         clustering_method = "ward.D2",
         annotation_col = annot,
         color = mako(30),
         border_color = NA,
         show_rownames = FALSE,
         scale = "row")




# ================================= Differential analysis with edgeR and limma ================================= #
## need to calculate cpm values from raw counts first, or use tpm counts ##
# make sure to filter out lowly expressed genes that have counts less than 20 #
fil.counts <- DGEList(counts=rawcounts, group = splan$subtype)
keep <- filterByExpr(fil.counts, min.count = 20) 
df <- rawcounts[keep,]
fil.counts <- fil.counts[keep,,keep.lib.sizes=FALSE]
dim(fil.counts)
  
## get log2 counts per million ##
logcounts <- cpm(fil.counts, log=TRUE)

## Library Size Normalization with TMM ##
# Scaling factor normalization based on the TMM method (trimmed mean of M-values in edgeR) # 
fil.counts <- calcNormFactors(fil.counts, method = "TMM")
norm.counts <- cpm(fil.counts, log = TRUE)
fil.counts$samples

## plot MA plots of normalized counts after TMM normalization ##
par(mfrow=c(1,2))
plotMD(logcounts, column = 3)  
abline(h=0, col="grey")
plotMD(fil.counts, column = 3)
abline(h=0, col = "grey")

## plot boxplots of log vs normalized counts ## 
par(mfrow=c(1,3))
boxplot(rawcounts, las=2, main = "raw counts")
boxplot(logcounts, las=2, main = "log counts")
boxplot(norm.counts, las=2, main = "TMM normalization")


# ============== limma ============== #
## set design parameters for limma voom ##
design <- model.matrix(~ 0 +subtype, data=splan)
## plot mean-variance trend ## 
vm <- voom(fil.counts, design, plot = TRUE)

## Testing for statistical differences ## 
vfit <- lmFit(vm, design)

## Set contrast between conditions you wish to compare. The names will be the column names of the "design" object created on line 239, subtype... ##
contrast <- makeContrasts(subtypegroup1 - subtypegroup2, levels = design)

## Run test ## 
efit <- contrasts.fit(vfit, contrast)
efit <- eBayes(efit)
plotSA(efit)

## extract and export results of comparison ##
res <- topTreat(efit, coef = 1, number=Inf)
head(res) #res can then be exported
write.csv(res, "data/diff_expression_limma_group2_vs_group1_gfp.csv")

## plot the p-value distribution (should be higher frequency at low pvalue, and lower frequency at high pvalue) ##
hist(res$P.Value, main = "Pvalue histogram", col = "grey50", border = "white")

## Output number of significantly differentially expressed genes between two conditions that were set in the contrast ##
dres <- decideTests(efit, p.value = 0.05, lfc = 1)
dres <- dres[rownames(res),]
summary(dres)
## extract all differentially expressed genes ## 
deg <- rownames(dres[which(dres[,1]!=0),])
write.csv(deg, "data/degs_limma_group2_vs_group1_gfp.csv")

## plot individual genes based on their order within res object ##
mygene <- rownames(res)[3]
barplot(norm.counts[mygene,], 
        ylim = c(0,15),
        las=2, 
        main=mygene, 
        ylab = "Normalized counts", 
        col = "grey50", 
        border = "white")

## Heatmap of most differentiall expressed genes ##
idx.sub <- which(splan$subtype=="starve_gfp" | splan$subtype=="starve_cre")
data.sub <- norm.counts[deg[1:100], idx.sub]
pheatmap(data.sub,
         show_rownames=FALSE)

## MAplot (mean/average) where 'M' stands for 'fold-change', and 'A' for mean expression ##
plot(res$AveExpr, res$logFC, xlab="A - Mean Expression", ylab = "M - logFC",
     col=ifelse(res$adj.P.Val<0.05, "red", "black"), pch=16, cex=0.5)

## make a pretty volcano plot ##
LimmaVolcano <- function(res, main="", fct=1.5, pt=0.05){ stopifnot(require(ggplot2))
  res$sign <- 0
  res$sign[which(res$adj.P.Val < pt & abs(res$logFC) > fct)] <- 1
  p <- ggplot(data=res, aes(x=logFC, y=-log10(adj.P.Val), colour=as.factor(sign))) + theme_classic() + geom_point(alpha=0.4, size=2) +
    scale_color_manual(name="", values=c("1"="red", "0"="black")) + 
    ggtitle(paste0("Volcano Plot - Limma ", main)) + 
    theme(legend.position = "none") + xlab("log2 fold change") + 
    ylab("-log10 adj pvalue") + 
    geom_vline(xintercept=c(-fct, fct), linetype=2) + 
    geom_hline(yintercept=-log10(pt), linetype=2)
  p }
LimmaVolcano(res, fct=1, pt=0.05, main= " - group 1 vs group 2")



# ============== Trendy analysis (for time series response detection) ============== #
## make new object from normalized counts to use in trendy ## 
tr.data <- norm.counts

# need to separate group1 and group2 into separate data frames
group1.norm = subset(tr.data, select = -c(group_1_time1-1,group_1_time1-2,group_1_time1-3,
                                       group_1_time2-1,group_1_time2-2,group_1_time2-3,
                                       group_1_time3-1,group_1_time2-2,group_1_time3-3))
group2.norm = subset(tr.data, select = -c(group_2_time1-1,group_2_time1-2,group_2_time1-3,
                                       group_2_time2-1,group_2_time2-2,group_2_time2-3,
                                       group_2_time3-1,group_2_time2-2,group_2_time3-3))

## set time vector as number of replicates (columns in normalized data) ##
  # 3 equally spaced timepoints with 3 replicates each #
time.vector <- rep(1:3, each = 3)
trueSpacing <- c(1,1,1,2,2,2,3,3,3)

## run Trendy ##
res <- trendy(group1.norm, tVectIn = trueSpacing, maxK = 2)
res <- results(res)
res.top <- topTrendy(res)

## default adjusted R squared cutoff is 0.5 ##
res.top$AdjustedR2

## visualize trends of top dynamic genes ##
res.trend <- trendHeatmap(res.top)

## generate heatmaps of the different groups of genes ##
  # genes that are increased upon starvation #
heatmap.2(group1.norm[names(res.trend$firstup),],
          trace="none", Rowv=FALSE, Colv=FALSE, dendrogram = 'none',
          scale="row", main="top genes (first go up)")
  # genes that are decreased upon starvation #
heatmap.2(group1.norm[names(res.trend$firstdown),],
          trace="none", Rowv=FALSE, Colv=FALSE, dendrogram = 'none',
          scale="row", main="top genes (first go down)")
  # genes that don't change in response to starvation #
heatmap.2(group1.norm[names(res.trend$firstnochange),],
          trace="none", Rowv=FALSE, Colv=FALSE, dendrogram = 'none',
          scale="row", main="top genes (first no change)")

## plot and visualize individual genes ##
plotFeature(group1.norm, tVectIn = trueSpacing, simple = TRUE,
            featureNames = names(res.trend$firstdown)[1:6],
            trendyOutData = res)
